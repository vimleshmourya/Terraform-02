name: 'Terraform'

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write   # required for federated identity
  contents: read    # required for actions/checkout


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    - name: Azure Login
      uses: Azure/login@v2.3.0
      with:
        creds: 
        client-id: 078fc01f-29a8-4a16-856a-0dcef30cf770
        tenant-id: b1ec4912-b2ed-424a-a072-f1e7e69b770e
        client-secret: EL58Q~PjJvTRBGF.D6vJzQzjk_TFHOLofAPWldAX
        subscription-id: 5fbead97-423e-4814-809c-114db991d911

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
